{"version":3,"sources":["components/AddCategory.js","helpers/getGifts.js","components/GifGridItem.js","components/GiftGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","element","handleSubmit","type","value","onChange","target","handleInputChange","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GiftGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAIaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAkBhD,OAEI,sBAAMC,SAAY,SAACC,GAAD,OAZD,SAACA,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAAO,OAAKP,GAAL,mBAAoBO,OAC1CN,EAAc,KAOOO,CAAaL,IAAtC,SACI,uBACIM,KAAK,OACLC,MAASV,EACTW,SAAa,SAACR,GAAD,OApBC,SAACA,GACvBF,EAAcE,EAAES,OAAOF,OAmBKG,CAAkBV,S,+BCzBzCW,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0FAE6EC,UAAWH,GAFxF,sBAGII,MAAOF,GAHX,cAGbG,EAHa,gBAIIA,EAASC,OAJb,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACrC,OACI,sBAAKc,UAAU,yDAAf,UACG,qBAAKC,IAAMf,EAAMgB,IAAON,IACxB,kCAAMA,EAAN,WCHEO,EAAW,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECAhB,SAAEA,GAAe,IAAD,EAEdhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAuBxC,OAhBAC,qBAAW,WAEPxB,EAASC,GACNwB,MAAM,SAAAC,GAGLH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAMlB,CAAEpB,IAEEqB,EDnB2BK,CAAc1B,GAAxCoB,EAJgC,EAIhCA,QAAeP,EAJiB,EAIvBN,KAEjB,OACI,qCACI,mCAAQP,EAAR,OAEEoB,GAAW,0CAEf,qBAAKJ,UAAU,YAAf,SAGcH,EAAOJ,KAAK,SAAEC,GAAF,OACR,cAAC,EAAD,eAESA,GADCA,EAAIC,aEhB7BgB,EAAe,WAAO,IAAD,EAEM3C,mBAAS,CAAC,QAFhB,mBAEvB4C,EAFuB,KAEX7C,EAFW,KAI9B,OACI,qCACI,gDAEA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAEA,6BAEQ6C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAA0BA,SAAaA,GAAvBA,Y,MCdxC6B,IAASC,OACP,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,W","file":"static/js/main.94adca1f.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setinputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setinputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( element => [inputValue, ...element]);\n            setinputValue('');\n        }\n        \n    }\n\n    return (\n        \n        <form onSubmit= { (e) => handleSubmit(e) }>\n            <input\n                type=\"text\"\n                value= { inputValue }\n                onChange = { (e) => handleInputChange(e) }\n            />\n        </form>\n        \n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=0mw28c8UdvaQpBgTU7P4DwyfZCmaqGgt&q=${ encodeURI( category ) }&limit=10`;\n    const response = await fetch( url );\n    const { data } = await response.json();\n\n    const gifs = data.map ( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","\nimport React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n    return (\n        <div className=\"card animate__animated animate__bounce animate__fadeIn\">\n           <img src={ url } alt= { title } />\n           <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifts';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GiftGrid = ( { category } ) => {\n\n\n    \n    const { loading, data: images } = useFetchGifs( category );\n    \n    return ( \n        <>\n            <h3 > { category } </h3>\n\n            { loading && <p> Loading </p> }\n\n          <div className=\"card-grid\">\n                \n                    {\n                        images.map( ( img ) => (\n                            <GifGridItem \n                                key= {img.id}  \n                                { ...img } />\n                        ))\n                    }  \n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifts\";\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( ()=> {\n\n        getGifs( category )\n          .then( imgs => {\n              \n            \n            setState({\n                data: imgs,\n                loading: false\n            })\n           \n                \n          });\n\n    }, [ category ] )\n\n    return state;\n }","import { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GiftGrid } from \"./components/GiftGrid\";\n\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One']);\n\n    return (\n        <>\n            <h2> GifExpertApp </h2>\n\n            <AddCategory setCategories = { setCategories } /> \n            <hr/>\n\n            <ol>\n                {\n                    categories.map( category => \n                        <GiftGrid key= {category} category = { category } />\n                    )\n                }\n            </ol>\n        </>\n    );\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n     <GifExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}